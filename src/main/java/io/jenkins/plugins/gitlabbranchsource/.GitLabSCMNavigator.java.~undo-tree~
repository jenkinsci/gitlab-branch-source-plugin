(undo-tree-save-format-version . 1)
"ed82b55033d2e18ae581b0abec9e0181f89e7644"
[nil nil nil nil (26009 24436 786054 541000) 0 nil]
([nil nil ((10251 . 10252) (10250 . 10251) (10229 . 10250) (10208 . 10229) (10206 . 10208) (10204 . 10206) (10201 . 10204) (t 26009 23814 544346 463000) 10200) nil (26009 24436 786053 571000) 0 nil])
([nil nil ((8237 . 8246) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -8237) (undo-tree-id406 . -1) 8238 (8227 . 8238) (8219 . 8227) (#("g" 0 1 (face font-lock-comment-face fontified t)) . -8219) (undo-tree-id407 . -1) 8220 (8214 . 8220) (#("t" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8214) (undo-tree-id408 . -1) (#("o" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8215) (undo-tree-id409 . -1) (#(" " 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8216) (undo-tree-id410 . -1) (#("s" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8217) (undo-tree-id411 . -1) (#("e" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8218) (undo-tree-id412 . -1) (#("e" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8219) (undo-tree-id413 . -1) (#(" " 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8220) (undo-tree-id414 . -1) (#("i" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8221) (undo-tree-id415 . -1) (#("f" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8222) (undo-tree-id416 . -1) (#(" " 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8223) (undo-tree-id417 . -1) 8224 (#("w" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8224) (undo-tree-id418 . -1) (#("e" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8225) (undo-tree-id419 . -1) (#(" " 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8226) (undo-tree-id420 . -1) (#("h" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8227) (undo-tree-id421 . -1) (#("a" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8228) (undo-tree-id422 . -1) (#("v" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8229) (undo-tree-id423 . -1) (#("e" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8230) (undo-tree-id424 . -1) (#(" " 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8231) (undo-tree-id425 . -1) (#("a" 0 1 (face font-lock-comment-face c-in-sws t fontified nil)) . -8232) (undo-tree-id426 . -1) (#("l" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8233) (undo-tree-id427 . -1) (#("l" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8234) (undo-tree-id428 . -1) (#(" " 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8235) (undo-tree-id429 . -1) (#("o" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8236) (undo-tree-id430 . -1) (#("f" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8237) (undo-tree-id431 . -1) (#(" " 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8238) (undo-tree-id432 . -1) (#("t" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8239) (undo-tree-id433 . -1) (#("h" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8240) (undo-tree-id434 . -1) (#("e" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8241) (undo-tree-id435 . -1) (#(" " 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8242) (undo-tree-id436 . -1) (#("s" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -8243) (undo-tree-id437 . -1) (#("o" 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -8244) (undo-tree-id438 . -1) 8245 (8239 . 8245) (8222 . 8239) (8201 . 8222) (8199 . 8201) (8195 . 8199) (8195 . 8196) 8207) nil (26009 24436 786045 949000) 0 nil])
([nil nil ((7065 . 7074) (#("e" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -7065) (undo-tree-id400 . -1) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -7066) (undo-tree-id401 . -1) 7067 (#("e" 0 1 (face font-lock-comment-face fontified t)) . -7067) (undo-tree-id402 . -1) 7068 (7066 . 7068) (#("h" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -7066) (undo-tree-id403 . -1) (#(" " 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -7067) (undo-tree-id404 . -1) 7068 (7060 . 7068) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -7060) (undo-tree-id405 . -1) 7061 (7045 . 7061) (7043 . 7045) (7038 . 7043) 7038) nil (26009 24436 786022 894000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -10413) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("." 0 1 (fontified t)) . -10414) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) 10415 (10413 . 10415) (10412 . 10414) (10410 . 10412) (10407 . 10410) (10394 . 10407) (10373 . 10394) (#("," 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -10373) (undo-tree-id397 . -1) 10374 (10373 . 10374) (10368 . 10373) (10359 . 10368) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -10359) (undo-tree-id398 . -1) 10360 (10350 . 10360) (#("e" 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -10350) (undo-tree-id399 . -1) 10351 (10345 . 10351) (10343 . 10345) (10340 . 10343) 10293) nil (26009 24436 786014 279000) 0 nil])
([nil nil ((#("		if()
" 0 1 (c-is-sws t fontified t) 1 2 (c-is-sws t c-in-sws t fontified t) 2 3 (face font-lock-keyword-face c-is-sws t fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t) 5 6 (face (rainbow-delimiters-depth-5-face) fontified t) 6 7 (fontified t)) . 10408) (undo-tree-id0 . 2) (undo-tree-id1 . -5) (undo-tree-id2 . -5) (undo-tree-id3 . -5) (undo-tree-id4 . -5) (undo-tree-id5 . -5) (undo-tree-id6 . -5) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) (undo-tree-id10 . -5) (undo-tree-id11 . -5) (undo-tree-id12 . -5) (undo-tree-id13 . -5) (undo-tree-id14 . -5) (undo-tree-id15 . -5) (undo-tree-id16 . -5) (undo-tree-id17 . -5) (undo-tree-id18 . -5) (undo-tree-id19 . -5) (undo-tree-id20 . -5) (undo-tree-id21 . -5) (undo-tree-id22 . -5) (undo-tree-id23 . -5) (undo-tree-id24 . -5) (undo-tree-id25 . -5) (undo-tree-id26 . -5) (undo-tree-id27 . -5) (undo-tree-id28 . -5) (undo-tree-id29 . -5) (undo-tree-id30 . -5) (undo-tree-id31 . -5) (undo-tree-id32 . -5) (undo-tree-id33 . -5) (undo-tree-id34 . -5) (undo-tree-id35 . -5) (undo-tree-id36 . -5) (undo-tree-id37 . -5) (undo-tree-id38 . -5) (undo-tree-id39 . -5) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -5) (undo-tree-id44 . -5) (undo-tree-id45 . -5) (undo-tree-id46 . -5) (undo-tree-id47 . -5) (undo-tree-id48 . -5) (undo-tree-id49 . -5) (undo-tree-id50 . -5) (undo-tree-id51 . -5) (undo-tree-id52 . -5) (undo-tree-id53 . -5) (undo-tree-id54 . -5) (undo-tree-id55 . -5) (undo-tree-id56 . -5) (undo-tree-id57 . -5) (undo-tree-id58 . -5) (undo-tree-id59 . -5) (undo-tree-id60 . -5) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -5) (undo-tree-id64 . -5) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -5) (undo-tree-id68 . -5) (undo-tree-id69 . -5) (undo-tree-id70 . -5) (undo-tree-id71 . -5) (undo-tree-id72 . -5) (undo-tree-id73 . -5) (undo-tree-id74 . -5) (undo-tree-id75 . -5) (undo-tree-id76 . -5) (undo-tree-id77 . -5) (undo-tree-id78 . -5) (undo-tree-id79 . -5) (undo-tree-id80 . -5) (undo-tree-id81 . -5) (undo-tree-id82 . -5) (undo-tree-id83 . -5) (undo-tree-id84 . -5) (undo-tree-id85 . -5) (undo-tree-id86 . -5) (undo-tree-id87 . -5) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -5) (undo-tree-id94 . -5) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) (undo-tree-id98 . -5) (undo-tree-id99 . -5) (undo-tree-id100 . -5) (undo-tree-id101 . -5) (undo-tree-id102 . -5) (undo-tree-id103 . -5) (undo-tree-id104 . -5) (undo-tree-id105 . -5) (undo-tree-id106 . -5) (undo-tree-id107 . -5) (undo-tree-id108 . -5) (undo-tree-id109 . -5) (undo-tree-id110 . -5) (undo-tree-id111 . -5) (undo-tree-id112 . -5) (undo-tree-id113 . -5) (undo-tree-id114 . -5) (undo-tree-id115 . -5) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) (undo-tree-id126 . -5) (undo-tree-id127 . -5) (undo-tree-id128 . -5) (undo-tree-id129 . -5) (undo-tree-id130 . -5) (undo-tree-id131 . -5) (undo-tree-id132 . -5) (undo-tree-id133 . -5) (undo-tree-id134 . -5) (undo-tree-id135 . -5) (undo-tree-id136 . -5) (undo-tree-id137 . -5) (undo-tree-id138 . -5) (undo-tree-id139 . -5) (undo-tree-id140 . -5) (undo-tree-id141 . -5) (undo-tree-id142 . -5) (undo-tree-id143 . -5) (undo-tree-id144 . -5) (undo-tree-id145 . -5) (undo-tree-id146 . -5) (undo-tree-id147 . -5) (undo-tree-id148 . -5) (undo-tree-id149 . -5) (undo-tree-id150 . -5) (undo-tree-id151 . -5) (undo-tree-id152 . -5) (undo-tree-id153 . -5) (undo-tree-id154 . -5) (undo-tree-id155 . -5) (undo-tree-id156 . -5) (undo-tree-id157 . -5) (undo-tree-id158 . -5) (undo-tree-id159 . -5) (undo-tree-id160 . -5) (undo-tree-id161 . -5) (undo-tree-id162 . -5) (undo-tree-id163 . -5) (undo-tree-id164 . -5) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -7) (undo-tree-id249 . -6) 10412) nil (26009 24436 785920 675000) 0 nil])
([nil nil ((10407 . 10410) (t 26009 24436 795666 718000) 10359) nil (26009 24951 239414 455000) 0 nil])
([nil nil ((10410 . 10412)) nil (26009 24951 239413 558000) 0 nil])
([nil nil ((10412 . 10414)) nil (26009 24951 239413 72000) 0 nil])
([nil nil ((10413 . 10416)) nil (26009 24951 239412 499000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -10414) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("-" 0 1 (fontified t)) . -10415) (undo-tree-id4 . -1) 10416) nil (26009 24951 239411 820000) 0 nil])
([nil nil ((10414 . 10416)) nil (26009 24951 239409 859000) 0 nil])
([nil nil ((10416 . 10419)) nil (26009 24951 239409 348000) 0 nil])
([nil nil ((10417 . 10421) (#("nu" 0 1 (fontified t) 1 2 (fontified t)) . -10417) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 10419) nil (26009 24951 239408 318000) 0 nil])
([nil nil ((10422 . 10424)) nil (26009 24951 239374 520000) 0 nil])
([nil nil ((10423 . 10427)) nil (26009 24951 239371 487000) 0 nil])
([nil nil ((10423 . 10430) (#("
" 0 1 (fontified t)) . -10423) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#(" " 0 1 (fontified t)) . -10424) (undo-tree-id222 . -1) (undo-tree-id223 . -1) 10425 (#(" " 0 1 (fontified t)) . -10425) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#(" " 0 1 (fontified t)) . -10426) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#(" " 0 1 (fontified nil)) . -10427) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#(" " 0 1 (fontified t)) . -10428) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#(" " 0 1 (fontified t)) . -10429) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#(" " 0 1 (fontified t)) . -10430) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#(" " 0 1 (fontified nil)) . -10431) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("	" 0 1 (fontified nil)) . 10432) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (10424 . 10432) 10425 (#(" " 0 1 (fontified t)) . -10425) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#(" " 0 1 (fontified t)) . -10426) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#(" " 0 1 (fontified t)) . -10427) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#(" " 0 1 (fontified t)) . -10428) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#(" " 0 1 (fontified t)) . -10429) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#(" " 0 1 (fontified t)) . -10430) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#(" " 0 1 (fontified t)) . -10431) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#(" " 0 1 (fontified nil)) . -10432) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("	" 0 1 (fontified nil)) . 10433) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (10425 . 10433) 10426 (#(" " 0 1 (fontified t)) . -10426) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#(" " 0 1 (fontified t)) . -10427) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#(" " 0 1 (fontified t)) . -10428) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#(" " 0 1 (fontified t)) . -10429) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (#("p" 0 1 (fontified t)) . -10430) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("." 0 1 (fontified t)) . -10431) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 10432 (10431 . 10432) (10430 . 10431) (10423 . 10430) (#("
" 0 1 (fontified t)) . -10423) (undo-tree-id270 . -1) 10424 (t 26009 24951 251912 784000)) nil (26009 25191 493051 525000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -10414) (undo-tree-id219 . -1) 10415 (10414 . 10415)) nil (26009 25191 493029 230000) 0 nil])
([nil nil ((10414 . 10415)) nil (26009 25191 493028 295000) 0 nil])
([nil nil ((10453 . 10463) (10451 . 10453) (10450 . 10452) (#("\"" 0 1 (face (rainbow-delimiters-depth-6-face) fontified nil)) . -10450) (10450 . 10451) (10450 . 10451) (10425 . 10431) (#("		   " 0 5 (fontified nil)) . 10425) (undo-tree-id210 . -5) (10448 . 10449) (10431 . 10448) (10430 . 10431) (#("s" 0 1 (fontified t)) . -10430) (undo-tree-id211 . -1) (#("y" 0 1 (fontified t)) . -10431) (undo-tree-id212 . -1) (#("s" 0 1 (fontified t)) . -10432) (undo-tree-id213 . -1) 10433 (10430 . 10433) (#(" " 0 1 (fontified t)) . -10430) (undo-tree-id214 . -1) (undo-tree-id215 . -1) 10431 (#("S" 0 1 (fontified nil)) . -10430) (undo-tree-id216 . -1) (#("y" 0 1 (fontified nil)) . -10431) (#("s" 0 1 (fontified nil)) . -10432) (#("y" 0 1 (fontified nil)) . -10433) (#("s" 0 1 (fontified nil)) . -10434) (#("y" 0 1 (fontified nil)) . -10435) 10436 (10431 . 10436) (10430 . 10431) (#("p" 0 1 (fontified t)) . -10430) (undo-tree-id217 . -1) (#("." 0 1 (fontified t)) . -10431) (undo-tree-id218 . -1) 10432 (10430 . 10432)) nil (26009 25191 493026 552000) 0 nil])
([nil nil ((10465 . 10466)) nil (26009 25191 493016 123000) 0 nil])
([nil nil ((10456 . 10463) (#("package" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t)) . 10456) (undo-tree-id0 . -7) (undo-tree-id1 . -7) (undo-tree-id2 . -7) (undo-tree-id3 . -7) (undo-tree-id4 . -7) (undo-tree-id5 . -7) (undo-tree-id6 . -7) (undo-tree-id7 . -7) (undo-tree-id8 . -7) (undo-tree-id9 . -7) (undo-tree-id10 . -7) (undo-tree-id11 . -7) (undo-tree-id12 . -7) (undo-tree-id13 . -7) (undo-tree-id14 . -7) (undo-tree-id15 . -7) (undo-tree-id16 . -7) (undo-tree-id17 . -7) (undo-tree-id18 . -7) (undo-tree-id19 . -7) (undo-tree-id20 . -7) (undo-tree-id21 . -7) (undo-tree-id22 . -7) (undo-tree-id23 . -7) (undo-tree-id24 . -7) (undo-tree-id25 . -7) (undo-tree-id26 . -7) (undo-tree-id27 . -7) (undo-tree-id28 . -7) (undo-tree-id29 . -7) (undo-tree-id30 . -7) (undo-tree-id31 . -7) (undo-tree-id32 . -7) (undo-tree-id33 . -7) (undo-tree-id34 . -7) (undo-tree-id35 . -7) (undo-tree-id36 . -7) (undo-tree-id37 . -7) (undo-tree-id38 . -7) (undo-tree-id39 . -6) (undo-tree-id40 . -6) (undo-tree-id41 . -6) (undo-tree-id42 . -6) (undo-tree-id43 . -6) (undo-tree-id44 . -6) (undo-tree-id45 . -6) (undo-tree-id46 . -6) (undo-tree-id47 . -6) (undo-tree-id48 . -6) (undo-tree-id49 . -6) (undo-tree-id50 . -6) (undo-tree-id51 . -6) (undo-tree-id52 . -6) (undo-tree-id53 . -6) (undo-tree-id54 . -6) (undo-tree-id55 . -6) (undo-tree-id56 . -6) (undo-tree-id57 . -6) (undo-tree-id58 . -6) (undo-tree-id59 . -6) (undo-tree-id60 . -6) (undo-tree-id61 . -6) (undo-tree-id62 . -6) (undo-tree-id63 . -6) (undo-tree-id64 . -6) (undo-tree-id65 . -6) (undo-tree-id66 . -6) (undo-tree-id67 . -5) (undo-tree-id68 . -5) (undo-tree-id69 . -5) (undo-tree-id70 . -5) (undo-tree-id71 . -5) (undo-tree-id72 . -5) (undo-tree-id73 . -5) (undo-tree-id74 . -5) (undo-tree-id75 . -5) (undo-tree-id76 . -5) (undo-tree-id77 . -5) (undo-tree-id78 . -5) (undo-tree-id79 . -5) (undo-tree-id80 . -5) (undo-tree-id81 . -5) (undo-tree-id82 . -5) (undo-tree-id83 . -5) (undo-tree-id84 . -5) (undo-tree-id85 . -5) (undo-tree-id86 . -5) (undo-tree-id87 . -5) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -5) (undo-tree-id94 . -5) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -4) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -7) (undo-tree-id208 . -7) (undo-tree-id209 . -6)) nil (26009 25191 493010 951000) 0 nil])
([nil nil ((10308 . 10312) (10293 . 10308) (#(" " 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -10293) (undo-tree-id274 . -1) 10294 (10273 . 10294) (10263 . 10273) (10242 . 10263) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -10242) (undo-tree-id275 . -1) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -10243) (undo-tree-id276 . -1) (#("k" 0 1 (face font-lock-comment-face fontified t)) . -10244) (undo-tree-id277 . -1) 10245 (10240 . 10245) (#("e" 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -10240) (undo-tree-id278 . -1) 10241 (10231 . 10241) (10229 . 10231) (#("w" 0 1 (fontified t)) . -10229) (undo-tree-id279 . -1) (#("e" 0 1 (fontified t)) . -10230) (undo-tree-id280 . -1) (#(" " 0 1 (fontified t)) . -10231) (undo-tree-id281 . -1) (#("m" 0 1 (fontified t)) . -10232) (undo-tree-id282 . -1) (#("a" 0 1 (fontified t)) . -10233) (undo-tree-id283 . -1) (#("k" 0 1 (fontified t)) . -10234) (undo-tree-id284 . -1) 10235 (10229 . 10235) (10223 . 10229) (t 26009 25191 505263 569000) 10222) nil (26009 29458 558073 611000) 0 nil])
([nil nil ((#("k" 0 1 (c-is-sws t fontified t)) . -10318) (undo-tree-id271 . -1) (#("k" 0 1 (fontified t)) . -10319) (undo-tree-id272 . -1) (#("k" 0 1 (fontified t)) . -10320) (undo-tree-id273 . -1) 10321 (10318 . 10321) (10312 . 10318) 10311) nil (26009 29458 558064 168000) 0 nil])
([nil nil ((1 . 61) ("package io.jenkins.plugins.gitlabbranchsource;

import static com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials;
import static com.cloudbees.plugins.credentials.domains.URIRequirementBuilder.fromUri;
import static io.jenkins.plugins.gitlabbranchsource.helpers.GitLabHelper.apiBuilder;
import static io.jenkins.plugins.gitlabbranchsource.helpers.GitLabHelper.getPrivateTokenAsPlainText;
import static io.jenkins.plugins.gitlabbranchsource.helpers.GitLabHelper.getProxyConfig;
import static io.jenkins.plugins.gitlabbranchsource.helpers.GitLabHelper.getServerUrl;
import static io.jenkins.plugins.gitlabbranchsource.helpers.GitLabHelper.getServerUrlFromName;
import static io.jenkins.plugins.gitlabbranchsource.helpers.GitLabIcons.ICON_GITLAB;
import static io.jenkins.plugins.gitlabbranchsource.helpers.GitLabIcons.iconFilePathPattern;

import com.cloudbees.plugins.credentials.CredentialsMatchers;
import com.cloudbees.plugins.credentials.CredentialsProvider;
import com.cloudbees.plugins.credentials.common.StandardCredentials;
import com.cloudbees.plugins.credentials.common.StandardListBoxModel;
import com.cloudbees.plugins.credentials.common.StandardUsernameCredentials;
import edu.umd.cs.findbugs.annotations.CheckForNull;
import edu.umd.cs.findbugs.annotations.NonNull;
import hudson.Extension;
import hudson.Util;
import hudson.console.HyperlinkNote;
import hudson.model.Action;
import hudson.model.Item;
import hudson.model.Queue;
import hudson.model.TaskListener;
import hudson.security.ACL;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import io.jenkins.plugins.gitlabbranchsource.helpers.GitLabAvatar;
import io.jenkins.plugins.gitlabbranchsource.helpers.GitLabGroup;
import io.jenkins.plugins.gitlabbranchsource.helpers.GitLabLink;
import io.jenkins.plugins.gitlabbranchsource.helpers.GitLabOwner;
import io.jenkins.plugins.gitlabbranchsource.helpers.GitLabUser;
import io.jenkins.plugins.gitlabserverconfig.credentials.helpers.GitLabCredentialMatcher;
import io.jenkins.plugins.gitlabserverconfig.servers.GitLabServer;
import io.jenkins.plugins.gitlabserverconfig.servers.GitLabServers;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.inject.Inject;
import jenkins.model.Jenkins;
import jenkins.plugins.git.traits.GitBrowserSCMSourceTrait;
import jenkins.scm.api.SCMHeadObserver;
import jenkins.scm.api.SCMNavigator;
import jenkins.scm.api.SCMNavigatorDescriptor;
import jenkins.scm.api.SCMNavigatorEvent;
import jenkins.scm.api.SCMNavigatorOwner;
import jenkins.scm.api.SCMSourceObserver;
import jenkins.scm.api.SCMSourceOwner;
import jenkins.scm.api.metadata.ObjectMetadataAction;
import jenkins.scm.api.trait.SCMNavigatorRequest.Witness;
import jenkins.scm.api.trait.SCMNavigatorTrait;
import jenkins.scm.api.trait.SCMNavigatorTraitDescriptor;
import jenkins.scm.api.trait.SCMSourceTrait;
import jenkins.scm.api.trait.SCMTrait;
import jenkins.scm.api.trait.SCMTraitDescriptor;
import jenkins.scm.impl.form.NamedArrayList;
import jenkins.scm.impl.trait.Discovery;
import jenkins.scm.impl.trait.Selection;
import org.apache.commons.lang.StringUtils;
import org.gitlab4j.api.GitLabApi;
import org.gitlab4j.api.GitLabApiException;
import org.gitlab4j.api.models.GroupProjectsFilter;
import org.gitlab4j.api.models.Project;
import org.gitlab4j.api.models.ProjectFilter;
import org.jenkins.ui.icon.IconSpec;
import org.jenkinsci.Symbol;
import org.jenkinsci.plugins.gitclient.GitClient;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.DataBoundSetter;
import org.kohsuke.stapler.QueryParameter;

public class GitLabSCMNavigator extends SCMNavigator {

    public static final Logger LOGGER = Logger.getLogger(GitLabSCMNavigator.class.getName());
    /**
     * The owner of the projects to navigate.
     */
    private final String projectOwner;
    /**
     * The GitLab server name configured in Jenkins.
     */
    private String serverName;
    /**
     * The default credentials to use for checking out).
     */
    private String credentialsId;

    /**
     * The behavioral traits to apply.
     */
    private List<SCMTrait<? extends SCMTrait<?>>> traits;

    /**
     * The path with namespace of Navigator projects.
     */
    private HashSet<String> navigatorProjects = new HashSet<>();

    /**
     * To store if project owner is group
     */
    private boolean isGroup;

    /**
     * To store if navigator should include subgroup projects
     */
    private boolean wantSubGroupProjects;

    private transient GitLabOwner gitlabOwner; // TODO check if a better data structure can be used

    @DataBoundConstructor
    public GitLabSCMNavigator(String projectOwner) {
        this.projectOwner = projectOwner;
        this.traits = new ArrayList<>();
    }

    public static String getProjectOwnerFromNamespace(String projectPathWithNamespace) {
        int namespaceLength = projectPathWithNamespace.lastIndexOf(\"/\");
        return projectPathWithNamespace.substring(0, namespaceLength);
    }

    public HashSet<String> getNavigatorProjects() {
        return navigatorProjects;
    }

    public boolean isGroup() {
        return isGroup;
    }

    public boolean isWantSubGroupProjects() {
        return wantSubGroupProjects;
    }

    public String getCredentialsId() {
        return credentialsId;
    }

    @DataBoundSetter
    public void setCredentialsId(String credentialsId) {
        this.credentialsId = credentialsId;
    }

    public String getServerName() {
        return serverName;
    }

    @DataBoundSetter
    public void setServerName(String serverName) {
        this.serverName = serverName;
    }

    public String getProjectOwner() {
        return projectOwner;
    }

    /**
     * Gets the behavioral traits that are applied to this navigator and any {@link
     * GitLabSCMSource} instances it discovers.
     *
     * @return the behavioral traits.
     */
    @NonNull
    public List<SCMTrait<? extends SCMTrait<?>>> getTraits() {
        return Collections.unmodifiableList(traits);
    }

    /**
     * Sets the behavioral traits that are applied to this navigator and any {@link
     * GitLabSCMSource} instances it discovers. The new traits will take affect on
     * the next
     * navigation through any of the {@link #visitSources(SCMSourceObserver)}
     * overloads or {@link
     * #visitSource(String, SCMSourceObserver)}.
     *
     * @param traits the new behavioral traits.
     */
    @DataBoundSetter
    public void setTraits(@CheckForNull SCMTrait[] traits) {
        this.traits = new ArrayList<>();
        if (traits != null) {
            for (SCMTrait trait : traits) {
                this.traits.add(trait);
            }
        }
    }

    // gets the owner of the gitlab
    private GitLabOwner getGitlabOwner(SCMNavigatorOwner owner) {
        if (gitlabOwner == null) {
            getGitlabOwner(apiBuilder(owner, serverName));
        }
        return gitlabOwner;
    }

    private GitLabOwner getGitlabOwner(GitLabApi gitLabApi) {
        if (gitlabOwner == null) {
            gitlabOwner = GitLabOwner.fetchOwner(gitLabApi, projectOwner);
        }
        return gitlabOwner;
    }

    /**
     * Sets the behavioral traits that are applied to this navigator and any {@link
     * GitLabSCMSource} instances it discovers. The new traits will take affect on
     * the next
     * navigation through any of the {@link #visitSources(SCMSourceObserver)}
     * overloads or {@link
     * #visitSource(String, SCMSourceObserver)}.
     *
     * @param traits the new behavioral traits.
     */
    @Override
    public void setTraits(@CheckForNull List<SCMTrait<? extends SCMTrait<?>>> traits) {
        this.traits = traits != null ? new ArrayList<>(traits) : new ArrayList<>();
    }

    @NonNull
    @Override
    protected String id() {
        return getServerUrlFromName(serverName) + \"::\" + projectOwner;
    }

    // this checks all of our project source files 
    @Override
    public void visitSources(@NonNull final SCMSourceObserver observer) throws IOException, InterruptedException {
        GitLabSCMNavigatorContext context = new GitLabSCMNavigatorContext().withTraits(traits);
        try (GitLabSCMNavigatorRequest request = context.newRequest(this, observer)) {
            GitLabApi gitLabApi = apiBuilder(observer.getContext(), serverName);
            getGitlabOwner(gitLabApi);
            List<Project> projects;
            if (gitlabOwner instanceof GitLabUser) {
                // Even returns the group projects owned by the user
                projects = gitLabApi.getProjectApi().getUserProjects(projectOwner, new ProjectFilter().withOwned(true));
            } else {
                isGroup = true;
                GroupProjectsFilter groupProjectsFilter = new GroupProjectsFilter();
                wantSubGroupProjects = request.wantSubgroupProjects();
                groupProjectsFilter.withIncludeSubGroups(wantSubGroupProjects);
                // If projectOwner is a subgroup, it will only return projects in the subgroup
                projects = gitLabApi.getGroupApi().getProjects(projectOwner, groupProjectsFilter);
            }
            int count = 0;
            observer.getListener().getLogger().format(\"%nChecking projects...%n\");
            StandardCredentials webHookCredentials = getWebHookCredentials(observer.getContext());
            GitLabApi webhookGitLabApi = null;
            String webHookUrl = null;
            if (webHookCredentials != null) {
                GitLabServer server = GitLabServers.get().findServer(serverName);
                String serverUrl = getServerUrl(server);
                webhookGitLabApi = new GitLabApi(
                        serverUrl, getPrivateTokenAsPlainText(webHookCredentials), null, getProxyConfig(serverUrl));
                webHookUrl = GitLabHookCreator.getHookUrl(server, true);
            }
	    // we may check with web hooks but we don't check if the projects returned are null
	    
            for (Project p : projects) {
                count++;
		//in here we should check if the project is null
		//in this loop we should check to see if there is a null pointer
		if(p == null){
		    System.out.println(\"null project\");
		}
                String projectPathWithNamespace = p.getPathWithNamespace();
                String projectOwner = getProjectOwnerFromNamespace(projectPathWithNamespace);
                String projectName = getProjectName(gitLabApi, request.withProjectNamingStrategy(), p);
                getNavigatorProjects().add(projectPathWithNamespace);
                if (StringUtils.isEmpty(p.getDefaultBranch())) {
                    observer.getListener()
                            .getLogger()
                            .format(
                                    \"%nIgnoring project with empty repository %s%n\",
                                    HyperlinkNote.encodeTo(p.getWebUrl(), p.getName()));
                    continue;
                }
                if (p.getArchived() && context.isExcludeArchivedRepositories()) {
                    observer.getListener()
                            .getLogger()
                            .format(
                                    \"%nIgnoring archived project %s%n\",
                                    HyperlinkNote.encodeTo(p.getWebUrl(), p.getName()));
                    continue;
                }
                observer.getListener()
                        .getLogger()
                        .format(\"%nChecking project %s%n\", HyperlinkNote.encodeTo(p.getWebUrl(), projectName));
                try {
                    GitLabServer server = GitLabServers.get().findServer(serverName);
                    if (webhookGitLabApi != null && webHookUrl != null) {
                        String secretToken = server.getSecretTokenAsPlainText();
                        if (secretToken == null) {
                            // sending 'null' to GitLab will ignore the value, when we want to update it to be empty.
                            secretToken = \"\";
                        }
                        observer.getListener()
                                .getLogger()
                                .format(
                                        \"Web hook %s%n\",
                                        GitLabHookCreator.createWebHookWhenMissing(
                                                webhookGitLabApi, projectPathWithNamespace, webHookUrl, secretToken));
                    }
                } catch (GitLabApiException e) {
                    observer.getListener().getLogger().format(\"Cannot set web hook: %s%n\", e.getReason());
                }
                if (request.process(
                        projectName,
                        name -> new GitLabSCMSourceBuilder(
                                        getId() + \"::\" + projectPathWithNamespace,
                                        serverName,
                                        credentialsId,
                                        projectOwner,
                                        projectPathWithNamespace,
                                        name)
                                .withTraits(traits)
                                .build(),
                        null,
                        (Witness) (name, isMatch) -> {
                            if (isMatch) {
                                observer.getListener().getLogger().format(\"Proposing %s%n\", name);
                            } else {
                                observer.getListener().getLogger().format(\"Ignoring %s%n\", name);
                            }
                        })) {
                    observer.getListener().getLogger().format(\"%n%d projects were processed (query complete)%n\", count);
                    return;
                }
            }
            observer.getListener().getLogger().format(\"%n%d projects were processed%n\", count);
        } catch (GitLabApiException | URISyntaxException e) {
            LOGGER.log(Level.WARNING, \"Exception caught:\" + e, e);
            throw new IOException(\"Failed to visit SCM source\", e);
        }
    }

    @NonNull
    private String getProjectName(GitLabApi gitLabApi, int projectNamingStrategy, Project project)
            throws URISyntaxException {
        String fullPath = project.getPathWithNamespace();
        String projectName;
        switch (projectNamingStrategy) {
            default:
                // for legacy reasons default naming strategy is set to Full Project path
            case 1:
                projectName = fullPath;
                break;
            case 2:
                // Project name
                projectName = project.getNameWithNamespace()
                        .replace(
                                String.format(\"%s / \", getGitlabOwner(gitLabApi).getFullName()), \"\");
                break;
            case 3:
                // Contextual project path
                URI ownerPathUri = new URI(projectOwner);
                URI fullPathUri = new URI(fullPath);
                projectName = ownerPathUri.relativize(fullPathUri).toString();
                break;
            case 4:
                // Simple project path
                projectName = fullPath.substring(fullPath.lastIndexOf('/') + 1);
                break;
        }
        return projectName;
    }

    private StandardCredentials getWebHookCredentials(SCMSourceOwner owner) {
        StandardCredentials credentials = null;
        GitLabServer server = GitLabServers.get().findServer(getServerName());
        if (server == null) {
            return null;
        }
        GitLabSCMNavigatorContext navigatorContext = new GitLabSCMNavigatorContext().withTraits(traits);
        GitLabSCMSourceContext ctx =
                new GitLabSCMSourceContext(null, SCMHeadObserver.none()).withTraits(navigatorContext.traits());
        GitLabHookRegistration webhookMode = ctx.webhookRegistration();
        switch (webhookMode) {
            case DISABLE:
                break;
            case SYSTEM:
                if (!server.isManageWebHooks()) {
                    break;
                }
                credentials = server.getCredentials(owner);
                if (credentials == null) {
                    LOGGER.log(Level.WARNING, \"No System credentials added, cannot create web hook\");
                }
                break;
            case ITEM:
                credentials = credentials(owner);
                if (credentials == null) {
                    LOGGER.log(Level.WARNING, \"No Item credentials added, cannot create web hook\");
                }
                break;
            default:
                return null;
        }
        return credentials;
    }

    @NonNull
    @Override
    protected List<Action> retrieveActions(
            @NonNull SCMNavigatorOwner owner, SCMNavigatorEvent event, @NonNull TaskListener listener)
            throws IOException, InterruptedException {
        getGitlabOwner(owner);
        String fullName = gitlabOwner.getFullName();
        String webUrl = gitlabOwner.getWebUrl();
        String avatarUrl = gitlabOwner.getAvatarUrl();
        String description = null;
        if (gitlabOwner instanceof GitLabGroup) {
            description = ((GitLabGroup) gitlabOwner).getDescription();
        }
        List<Action> result = new ArrayList<>();
        result.add(new ObjectMetadataAction(Util.fixEmpty(fullName), description, webUrl));
        if (StringUtils.isNotBlank(avatarUrl)) {
            result.add(new GitLabAvatar(avatarUrl));
        }
        result.add(GitLabLink.toGroup(webUrl));
        if (StringUtils.isBlank(webUrl)) {
            listener.getLogger().println(\"Web URL unspecified\");
        } else {
            listener.getLogger()
                    .printf(
                            \"%s URL: %s%n\",
                            gitlabOwner.getWord(),
                            HyperlinkNote.encodeTo(webUrl, StringUtils.defaultIfBlank(fullName, webUrl)));
        }
        return result;
    }

    @Override
    public void afterSave(@NonNull SCMNavigatorOwner owner) {
        GitLabSCMNavigatorContext navigatorContext = new GitLabSCMNavigatorContext().withTraits(traits);
        GitLabSCMSourceContext ctx =
                new GitLabSCMSourceContext(null, SCMHeadObserver.none()).withTraits(navigatorContext.traits());
        GitLabHookRegistration systemhookMode = ctx.systemhookRegistration();
        GitLabHookCreator.register(owner, this, systemhookMode);
    }

    public StandardCredentials credentials(SCMSourceOwner owner) {
        return CredentialsMatchers.firstOrNull(
                lookupCredentials(
                        StandardCredentials.class,
                        owner,
                        Jenkins.getAuthentication(),
                        fromUri(getServerUrlFromName(serverName)).build()),
                new GitLabCredentialMatcher());
    }

    @Symbol(\"gitlab\")
    @Extension
    public static class DescriptorImpl extends SCMNavigatorDescriptor implements IconSpec {

        @Inject
        private GitLabSCMSource.DescriptorImpl delegate;

        public static FormValidation doCheckProjectOwner(
                @AncestorInPath SCMSourceOwner context,
                @QueryParameter String projectOwner,
                @QueryParameter String serverName) {
            if (projectOwner.equals(\"\")) {
                return FormValidation.ok();
            }
            GitLabApi gitLabApi = null;
            try {
                gitLabApi = apiBuilder(context, serverName);
                GitLabOwner gitLabOwner = GitLabOwner.fetchOwner(gitLabApi, projectOwner);
                return FormValidation.ok(projectOwner + \" is a valid \" + gitLabOwner.getWord());
            } catch (IllegalStateException e) {
                return FormValidation.error(e, e.getMessage());
            }
        }

        @NonNull
        @Override
        public String getDisplayName() {
            return \"GitLab Group\";
        }

        @Override
        public String getPronoun() {
            return \"GitLab Group\";
        }

        @NonNull
        @Override
        public String getDescription() {
            return \"Scans a GitLab Group (or GitLab User) for all projects matching some defined markers.\";
        }

        @Override
        public String getIconClassName() {
            return ICON_GITLAB;
        }

        @Override
        public String getIconFilePathPattern() {
            return iconFilePathPattern(getIconClassName());
        }

        @Override
        public SCMNavigator newInstance(String name) {
            GitLabSCMNavigator navigator = new GitLabSCMNavigator(\"\");
            navigator.setTraits(getTraitsDefaults());
            return navigator;
        }

        public ListBoxModel doFillServerNameItems(
                @AncestorInPath SCMSourceOwner context, @QueryParameter String serverName) {
            if (context == null) {
                if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {
                    // must have admin if you want the list without a context
                    ListBoxModel result = new ListBoxModel();
                    result.add(serverName);
                    return result;
                }
            } else {
                if (!context.hasPermission(Item.EXTENDED_READ)) {
                    // must be able to read the configuration the list
                    ListBoxModel result = new ListBoxModel();
                    result.add(serverName);
                    return result;
                }
            }
            return GitLabServers.get().getServerItems();
        }

        public ListBoxModel doFillCredentialsIdItems(
                @AncestorInPath SCMSourceOwner context,
                @QueryParameter String serverName,
                @QueryParameter String credentialsId) {
            StandardListBoxModel result = new StandardListBoxModel();
            if (context == null) {
                if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {
                    // must have admin if you want the list without a context
                    result.includeCurrentValue(credentialsId);
                    return result;
                }
            } else {
                if (!context.hasPermission(Item.EXTENDED_READ)
                        && !context.hasPermission(CredentialsProvider.USE_ITEM)) {
                    // must be able to read the configuration or use the item credentials if you
                    // want the list
                    result.includeCurrentValue(credentialsId);
                    return result;
                }
            }
            result.includeEmptyValue();
            result.includeMatchingAs(
                    context instanceof Queue.Task ? ((Queue.Task) context).getDefaultAuthentication() : ACL.SYSTEM,
                    context,
                    StandardUsernameCredentials.class,
                    fromUri(getServerUrlFromName(serverName)).build(),
                    GitClient.CREDENTIALS_MATCHER);
            return result;
        }

        @SuppressWarnings(\"unused\") // jelly
        public List<NamedArrayList<? extends SCMTraitDescriptor<?>>> getTraitsDescriptorLists() {
            GitLabSCMSource.DescriptorImpl sourceDescriptor =
                    Jenkins.get().getDescriptorByType(GitLabSCMSource.DescriptorImpl.class);
            List<SCMTraitDescriptor<?>> all = new ArrayList<>();
            all.addAll(SCMNavigatorTrait._for(this, GitLabSCMNavigatorContext.class, GitLabSCMSourceBuilder.class));
            all.addAll(SCMSourceTrait._for(sourceDescriptor, GitLabSCMSourceContext.class, null));
            all.addAll(SCMSourceTrait._for(sourceDescriptor, null, GitLabSCMBuilder.class));
            Set<SCMTraitDescriptor<?>> dedup = new HashSet<>();
            for (Iterator<SCMTraitDescriptor<?>> iterator = all.iterator(); iterator.hasNext(); ) {
                SCMTraitDescriptor<?> d = iterator.next();
                if (dedup.contains(d) || d instanceof GitBrowserSCMSourceTrait.DescriptorImpl) {
                    // remove any we have seen already and ban the browser configuration as it will
                    // always be github
                    iterator.remove();
                } else {
                    dedup.add(d);
                }
            }
            List<NamedArrayList<? extends SCMTraitDescriptor<?>>> result = new ArrayList<>();
            NamedArrayList.select(
                    all,
                    \"Projects\",
                    new NamedArrayList.Predicate<SCMTraitDescriptor<?>>() {
                        @Override
                        public boolean test(SCMTraitDescriptor<?> scmTraitDescriptor) {
                            return scmTraitDescriptor instanceof SCMNavigatorTraitDescriptor;
                        }
                    },
                    true,
                    result);
            NamedArrayList.select(
                    all,
                    \"Within project\",
                    NamedArrayList.anyOf(
                            NamedArrayList.withAnnotation(Discovery.class),
                            NamedArrayList.withAnnotation(Selection.class)),
                    true,
                    result);
            NamedArrayList.select(all, \"Additional\", null, true, result);
            return result;
        }

        @Override
        @NonNull
        @SuppressWarnings(\"unused\") // jelly
        public List<SCMTrait<? extends SCMTrait<?>>> getTraitsDefaults() {
            return new ArrayList<>(delegate.getTraitsDefaults());
        }
    }
}
" . 1) (undo-tree-id69 . -25537) (undo-tree-id70 . -26096) (undo-tree-id71 . -26095) (undo-tree-id72 . -26096) (undo-tree-id73 . -26096) (undo-tree-id74 . -26096) (undo-tree-id75 . -26096) (undo-tree-id76 . -26096) (undo-tree-id77 . -26096) (undo-tree-id78 . -26096) (undo-tree-id79 . -26096) (undo-tree-id80 . -26096) (undo-tree-id81 . -26096) (undo-tree-id82 . -26096) (undo-tree-id83 . -26096) (undo-tree-id84 . -26096) (undo-tree-id85 . -26096) (undo-tree-id86 . -26096) (undo-tree-id87 . -26096) (undo-tree-id88 . -26096) (undo-tree-id89 . -26096) (undo-tree-id90 . -26096) (undo-tree-id91 . -26096) (undo-tree-id92 . -26096) (undo-tree-id93 . -26096) (undo-tree-id94 . -26096) (undo-tree-id95 . -26096) (undo-tree-id96 . -26096) (undo-tree-id97 . -26096) (undo-tree-id98 . -26096) (undo-tree-id99 . -26096) (undo-tree-id100 . -26096) (undo-tree-id101 . -26095) 26097 (t 26028 5873 760468 415000)) nil (26028 6104 821397 153000) 0 nil])
([nil nil (("git@github.com:rhit-gawronja/gitlab-branch-source-plugin.git" . 1) (undo-tree-id0 . -59) (undo-tree-id1 . -59) (undo-tree-id2 . -59) (undo-tree-id3 . -59) (undo-tree-id4 . -59) (undo-tree-id5 . -59) (undo-tree-id6 . -59) (undo-tree-id7 . -59) (undo-tree-id8 . -59) (undo-tree-id9 . -59) (undo-tree-id10 . -59) (undo-tree-id11 . -59) (undo-tree-id12 . -59) (undo-tree-id13 . -59) (undo-tree-id14 . -59) (undo-tree-id15 . -59) (undo-tree-id16 . -59) (undo-tree-id17 . -59) (undo-tree-id18 . -59) (undo-tree-id19 . -59) (undo-tree-id20 . -59) (undo-tree-id21 . -59) (undo-tree-id22 . -59) (undo-tree-id23 . -59) (undo-tree-id24 . -59) (undo-tree-id25 . -59) (undo-tree-id26 . -59) (undo-tree-id27 . -59) (undo-tree-id28 . -59) (undo-tree-id29 . -59) (undo-tree-id30 . -59) (undo-tree-id31 . -59) (undo-tree-id32 . -59) (undo-tree-id33 . -59) (undo-tree-id34 . -59) (undo-tree-id35 . -59) (undo-tree-id36 . -59) (undo-tree-id37 . -59) (undo-tree-id38 . -59) (undo-tree-id39 . -59) (undo-tree-id40 . -59) (undo-tree-id41 . -59) (undo-tree-id42 . -59) (undo-tree-id43 . -59) (undo-tree-id44 . -59) (undo-tree-id45 . -59) (undo-tree-id46 . -59) (undo-tree-id47 . -59) (undo-tree-id48 . -59) (undo-tree-id49 . -59) (undo-tree-id50 . -59) (undo-tree-id51 . -59) (undo-tree-id52 . -59) (undo-tree-id53 . -59) (undo-tree-id54 . -59) (undo-tree-id55 . -59) (undo-tree-id56 . -59) (undo-tree-id57 . -59) (undo-tree-id58 . -59) (undo-tree-id59 . -59) (undo-tree-id60 . -59) (undo-tree-id61 . -59) (undo-tree-id62 . -59) (undo-tree-id63 . -59) (undo-tree-id64 . -59) (undo-tree-id65 . -59) (undo-tree-id66 . -59) (undo-tree-id67 . -59) (undo-tree-id68 . -60) 60) nil (26028 6104 821375 764000) 0 nil])
([nil current ((1 . 26113)) nil (26028 6104 821297 230000) 0 nil])
nil
